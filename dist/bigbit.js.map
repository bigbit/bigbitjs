{"version":3,"sources":["webpack://bigbit/webpack/bootstrap","webpack://bigbit/./src/common/CyclicCounter.js","webpack://bigbit/./node_modules/bignumber.js/bignumber.js","webpack://bigbit/./src/common/encoding.js","webpack://bigbit/./index.js","webpack://bigbit/./src/HB/ByteBit.js","webpack://bigbit/./src/EHB/ByteBit.js","webpack://bigbit/./src/LB/LBSequencePremitive.js","webpack://bigbit/./src/LB/LBSequence.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","x","base","Error","by","y","__WEBPACK_AMD_DEFINE_RESULT__","globalObject","BigNumber","isNumeric","mathceil","Math","ceil","mathfloor","floor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","bitFloor","coeffToString","a","z","j","length","charCodeAt","slice","compare","b","xc","yc","k","e","intCheck","min","max","isArray","obj","toString","isOdd","toExponential","str","charAt","toFixedPoint","len","zs","clone","configObject","div","convertBase","parseNumeric","P","constructor","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","decimalSeparator","groupSeparator","groupSize","secondaryGroupSize","fractionGroupSeparator","fractionGroupSize","ALPHABET","alphabet","caseChanged","isNum","this","test","indexOf","replace","search","substring","round","DEBUG","toUpperCase","toLowerCase","push","format","rm","id","c0","ne","maxOrMin","args","method","normalise","pop","sd","ni","rd","pows10","out","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","set","v","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","_isBigNumber","maximum","arguments","lt","minimum","gt","random","random53bitInt","dp","rand","Uint32Array","copy","splice","toBaseOut","baseIn","baseOut","arrL","arr","reverse","sign","callerIsToString","pow","concat","multiply","temp","xlo","xhi","carry","klo","khi","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","NaN","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","isNaN","p1","p2","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","mod","times","integerValue","isEqualTo","eq","isFinite","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","xLTy","plus","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","split","g1","g2","intPart","fractionPart","isNeg","intDigits","substr","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","toJSON","undefined","define","getCodePoint","first","second","HeaderByte","require","ExtendedHeaderByte","LinkedBytes","increase","powerOf256","zerosRegExp","defaultOptions","errorOnNaN","infiniteIdentifier","arrOnly","forceExponent","ByteBit","decimal","options","opts","assign","val","decimalValue","headByte","exponent","decimalPointPosition","zeros","exec","exponentInBytes","coffecient","_levelUpIterative","level","quotient","remainder","_decimalToByteSequence","toByteArray","bArr","toExponentString","range","toBigNumber","headByteArray","index","bytesCount","exponentValue","coffecientIndex","numStr","repeat","exponentPow","decode","LBSequence","contants","ZERO","NAN","INFINITY","NEGATIVE_INFINITY","OTHER1","OTHER2","OTHER3","OTHER4","OTHER5","infinityIdentifier","encode","count","totalCountBytes","limit","byteSequence","code","powerOf128","num","sequence","_buildSequence","byteArr","start","end","String","fromCodePoint","strToByteArr","byteArrToStr"],"mappings":"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","file":"./dist/bigbit.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = function(x, base){\n    if(x > base || x < 0 ){\n        throw Error(\"Number should not be out of the range\");\n    }\n    return {\n        by : function(y){\n            if(x + y <= base){\n                return x + y;\n            }else{\n                return x + y - base;\n            }\n        }\n    }\n};",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v7.2.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        decimalSeparator: '.',\r\n        groupSeparator: ',',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        fractionGroupSize: 0\r\n      },\r\n\r\n      // The alphabet used for base conversion.\r\n      // It must be at least 2 characters long, with no '.' or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * n {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of n. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(n, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor usage without new.\r\n      if (!(x instanceof BigNumber)) {\r\n\r\n        // Don't throw on constructor call without new (#81).\r\n        // '[BigNumber Error] Constructor call without new: {n}'\r\n        //throw Error(bignumberError + ' Constructor call without new: ' + n);\r\n        return new BigNumber(n, b);\r\n      }\r\n\r\n      if (b == null) {\r\n\r\n        // Duplicate.\r\n        if (n instanceof BigNumber) {\r\n          x.s = n.s;\r\n          x.e = n.e;\r\n          x.c = (n = n.c) ? n.slice() : n;\r\n          return;\r\n        }\r\n\r\n        isNum = typeof n == 'number';\r\n\r\n        if (isNum && n * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / n < 0 ? (n = -n, -1) : 1;\r\n\r\n          // Faster path for integers.\r\n          if (n === ~~n) {\r\n            for (e = 0, i = n; i >= 10; i /= 10, e++);\r\n            x.e = e;\r\n            x.c = [n];\r\n            return;\r\n          }\r\n\r\n          str = n + '';\r\n        } else {\r\n          if (!isNumeric.test(str = n + '')) return parseNumeric(x, str, isNum);\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n        str = n + '';\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(n instanceof BigNumber ? n : str);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        isNum = typeof n == 'number';\r\n\r\n        if (isNum) {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (n * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / n < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + n);\r\n          }\r\n\r\n          // Prevent later check for length on converted number.\r\n          isNum = false;\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, n + '', isNum, b);\r\n          }\r\n        }\r\n\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      str = str.slice(i, ++len);\r\n\r\n      if (str) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (n > MAX_SAFE_INTEGER || n !== mathfloor(n))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * n));\r\n        }\r\n\r\n        e = e - i - 1;\r\n\r\n         // Overflow?\r\n        if (e > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            str = str.slice(i);\r\n            i = LOG_BASE - str.length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *      decimalSeparator       {string}\r\n     *      groupSeparator         {string}\r\n     *      groupSize              {number}\r\n     *      secondaryGroupSize     {number}\r\n     *      fractionGroupSeparator {string}\r\n     *      fractionGroupSize      {number}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (isArray(v)) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (isArray(v)) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if only one character, or contains '.' or a repeated character.\r\n            if (typeof v == 'string' && !/^.$|\\.|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * v {any}\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      return v instanceof BigNumber || v && v._isBigNumber === true || false;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0))\r\n              : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && ne <= TO_EXP_NEG\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var m, n,\r\n        i = 0;\r\n\r\n      if (isArray(args[0])) args = args[0];\r\n      m = new BigNumber(args[0]);\r\n\r\n      for (; ++i < args.length;) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n          x.c = x.e = null;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.c = x.e = x.s = null;\r\n        }\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + n);\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+x.valueOf(), nIsBig ? 2 - isOdd(n) : +n));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        nIsOdd = n % 2;\r\n      }\r\n\r\n      if (nIsNeg) n.s = 1;\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (nIsBig) {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n          if (!n.c[0]) break;\r\n          nIsBig = n.e > 14;\r\n          nIsOdd = isOdd(n);\r\n        } else {\r\n          n = mathfloor(n / 2);\r\n          if (!n) break;\r\n          nIsOdd = n % 2;\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+x);\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '1e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c  ).slice(0, s) === (n =\r\n             coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the FORMAT object (see BigNumber.set).\r\n     *\r\n     * FORMAT = {\r\n     *      decimalSeparator : '.',\r\n     *      groupSeparator : ',',\r\n     *      groupSize : 3,\r\n     *      secondaryGroupSize : 0,\r\n     *      fractionGroupSeparator : '\\xA0',    // non-breaking space\r\n     *      fractionGroupSize : 0\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFormat = function (dp, rm) {\r\n      var str = this.toFixed(dp, rm);\r\n\r\n      if (this.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +FORMAT.groupSize,\r\n          g2 = +FORMAT.secondaryGroupSize,\r\n          groupSeparator = FORMAT.groupSeparator,\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = this.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n\r\n          for (; i < len; i += g1) {\r\n            intPart += groupSeparator + intDigits.substr(i, g1);\r\n          }\r\n\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + FORMAT.decimalSeparator + ((g2 = +FORMAT.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + FORMAT.fractionGroupSeparator)\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string array representing the value of this BigNumber as a simple fraction with\r\n     * an integer numerator and an integer denominator. The denominator will be a positive\r\n     * non-zero value less than or equal to the specified maximum denominator. If a maximum\r\n     * denominator is not specified, the denominator will be the lowest value necessary to\r\n     * represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var arr, d, d0, d1, d2, e, exp, n, n0, n1, q, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + md);\r\n        }\r\n      }\r\n\r\n      if (!xc) return x.toString();\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e *= 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      arr = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n         div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1\r\n          ? [n1.toString(), d1.toString()]\r\n          : [n0.toString(), d0.toString()];\r\n\r\n      MAX_EXP = exp;\r\n      return arr;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +this;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        str = coeffToString(n.c);\r\n\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(str, e)\r\n           : toFixedPoint(str, e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(str, e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      var str,\r\n        n = this,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== (n < 0 ? mathceil(n) : mathfloor(n))) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + n);\r\n    }\r\n  }\r\n\r\n\r\n  function isArray(obj) {\r\n    return Object.prototype.toString.call(obj) == '[object Array]';\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n","function getCodePoint(str, i) {\n    var first = str.charCodeAt(i);\n\n    if (first >= 0xD800 && first <= 0xDBFF && str.length > 1) {\n        var second = str.charCodeAt(i+1);\n\n        if (second >= 0xDC00 && second <= 0xDFFF) {\n            return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n        }\n    }\n\n    return first;\n};\n\nmodule.exports = {\n    getCodePoint : getCodePoint\n}","module.exports = {\n    HeaderByte: require(\"./src/HB/ByteBit\"),\n    ExtendedHeaderByte: require(\"./src/EHB/ByteBit\"),\n    LinkedBytes: require(\"./src/LB/LBSequence\")\n}","const increase = require(\"../common/CyclicCounter\");\nconst BigNumber = require(\"bignumber.js\");\n\nconst base = 256;\n//calculate values in advance to speed up runtime calculations\nconst powerOf256 = [ //exponentTableOf256\n    BigNumber(256).pow(0),\n    BigNumber(256).pow(1),\n    BigNumber(256).pow(2),\n    BigNumber(256).pow(3),\n    BigNumber(256).pow(4),\n    BigNumber(256).pow(5),\n    BigNumber(256).pow(6),\n    BigNumber(256).pow(7),\n    BigNumber(256).pow(8),\n    BigNumber(256).pow(9),\n    BigNumber(256).pow(10),\n    BigNumber(256).pow(11),\n    BigNumber(256).pow(12),\n    BigNumber(256).pow(13),\n    BigNumber(256).pow(14),\n    BigNumber(256).pow(15),\n    BigNumber(256).pow(16),\n    BigNumber(256).pow(17),\n    BigNumber(256).pow(18),\n    BigNumber(256).pow(19),\n    BigNumber(256).pow(20),\n]\nconst zerosRegExp = /(0+)$/;\n\nconst defaultOptions = {\n    decimalSeparator: \".\",\n    errorOnNaN: false,\n    infiniteIdentifier: \"infinity\", // \"- infinity\", \"-infinity\",\n    arrOnly: true,\n    forceExponent: true, //It'll remove trailing zeros\n}\nfunction ByteBit( decimal , options){\n    const opts = Object.assign({}, defaultOptions, options);\n\n    //Check for special values\n    if( typeof decimal === \"string\"){\n        decimal = decimal.toLowerCase().replace(/ /g,\"\");\n        let val;\n        if( decimal === opts.infiniteIdentifier ){\n            val = 64\n        }else if( decimal === (\"-\"+ opts.infiniteIdentifier) ){\n            val = 192\n        }\n\n        if( val ){\n            if( opts.arrOnly){\n                return [ val ];\n            }else{\n                return val;\n            }\n        }\n    }else if( decimal == 0) {\n        if( opts.arrOnly){\n            return [ 0 ];\n        }else{\n            return 0;\n        }\n    }\n    \n    BigNumber.config({\n        FORMAT : {\n            decimalSeparator : opts.decimalSeparator\n        }\n    });\n\n    let min = 0;\n    this.decimalValue = BigNumber(decimal);\n\n    if(this.decimalValue.isNaN() ){\n        if(opts.errorOnNaN){\n            throw new Error(\"Invalid number:\"+ decimal);\n        }else if( opts.arrOnly){\n            return [ 128 ];\n        }else{\n            return 128;\n        }\n    }\n\n    this.headByte = 0;\n    \n    if(typeof decimal === 'number'){\n        decimal = '' + decimal;\n    }\n    \n    this.exponent = 0;\n\n    //remove decimal point\n    var decimalPointPosition = decimal.indexOf( opts.decimalSeparator );\n    if( decimalPointPosition !== -1 ){\n        \n        //there is no point of having trailing zero in decimal values\n        //so remove them\n        decimal = decimal.replace(/0+$/, \"\"); //remove trailing zeros\n        this.exponent = decimal.length - decimalPointPosition - 1 ;\n        if( this.exponent ) { // ignore the number like 123.00\n            this.exponent = -this.exponent;\n        }\n        \n        decimal = decimal.replace(opts.decimalSeparator, \"\");\n    }\n\n    //remove trailing zeros\n    //exponent value take an extra byte. So don't create it until the number is smaller than 65535\n    if( opts.forceExponent && this.decimalValue.isGreaterThan(65535) ){\n        var zeros = zerosRegExp.exec(decimal);\n        if( zeros ){\n            this.exponent += zeros[1].length;\n            decimal = decimal.replace(/0+$/, \"\"); //remove trailing zeros\n        }\n    }\n\n    this.decimalValue = BigNumber(decimal);\n\n    //update head byte as per exponent\n    if( this.exponent ) {\n        if(Math.abs(this.exponent) > 127) throw new Error(\"Maximum value of exponent is exceeded.\");\n        \n        this.headByte = this.headByte | 64;\n        if( this.exponent > 0) {\n            this.exponentInBytes = this.exponent;\n        }else{\n            this.exponentInBytes = -this.exponent + 128;\n        }\n    }\n\n    if( this.decimalValue.isNegative() ){\n        this.headByte = this.headByte | 128;\n        this.decimalValue = this.decimalValue.abs();\n    }\n    \n    this.coffecient = [];\n\n    this._levelUpIterative = function(level, quotient, remainder){\n\n        let coffecient = [ 0 ];\n        coffecient[level] = increase(coffecient[level] | 0, base).by(remainder);\n\n        for(level=1 ; quotient.isGreaterThan(base - 1);level++ ){//still divisible\n            remainder = quotient.modulo( base ).toNumber();\n            quotient = quotient.minus(remainder).dividedBy( base );\n            \n            coffecient[level] = increase(coffecient[level] | 0, base).by(remainder);\n        }\n        \n        if(quotient.isEqualTo(0)) {\n            //don't add extra empty byte\n        }else{\n            if( !coffecient[ level ] ) coffecient.push( 0 );\n\n            coffecient[ level ] = increase(coffecient[ level ], base).by( quotient.toNumber() );\n        }\n\n        return coffecient;\n    }\n\n    this._decimalToByteSequence = function(){\n\n        let remainder = this.decimalValue.modulo( base ).toNumber();\n        let quotient = this.decimalValue.minus(remainder).dividedBy( base );\n\n        this.coffecient = this._levelUpIterative(0, quotient, remainder);\n        if(this.exponent){\n            this.headByte = this.headByte | (this.coffecient.length + 1);\n        }else{\n            this.headByte = this.headByte | this.coffecient.length;\n        }\n    }\n    this._decimalToByteSequence();\n\n    /**\n     * Returns Byte array of header byte, exponent byte, and coffecients only\n     */\n    this.toByteArray = function(){\n        let bArr = [ this.headByte ];\n        if( this.exponentInBytes ){\n            bArr.push(this.exponentInBytes );\n        }\n        //const bArr = [ ];\n        bArr.push( ... this.coffecient );\n        return bArr;\n    }\n\n    this.toExponentString = function(range){\n        return toBigNumber( this.toByteArray() ).toExponential(range);\n    }\n    \n    this.toString = function(){\n        return toBigNumber( this.toByteArray() ).toFixed();\n    }\n}\n\nfunction exponentPow(numStr, pow){\n    if(pow > 0){//positive\n        return numStr + '0'.repeat(pow);\n    }else{//negative\n        const index = (numStr.length + pow);\n        return numStr.substring(0,index) + \".\" + numStr.substring(index)\n    }\n}\n\n\n/**\n * Convert HB bytes array to BigNumber.\n * HB bytes array can be read from buffer when buffer/bytes array and index is given\n * or when passed as method param\n * otherwise construct it with instance value\n */\nconst toBigNumber = function( headByteArray , index ){\n    //headByteArray || ( headByteArray = this.toByteArray() );\n    index || (index = 0);\n    let headByte = headByteArray[index];\n\n    let bytesCount = headByte & 63;\n    if( bytesCount && headByteArray[ index + bytesCount ] === undefined ) throw new Error(\"Invalid HB Bytes sequence. All coffecient bytes are not present.\");\n\n    //read for special values\n    if( headByte === 0){\n        return BigNumber(0);\n    }else if( headByte === 128){\n        return NaN;\n    }else if( headByte === 64){\n        return opts.infiniteIdentifier;\n    }else if( headByte === 192){\n        return \"-\"+opts.infiniteIdentifier;\n    }\n\n    let isNegative = false;\n    if( (headByte & 128) === 128 ) {//negative\n        isNegative = true;\n        headByte = headByte ^ 128;\n    }\n    \n    let exponentValue = 0;\n    if( (headByte & 64) === 64){//exponent byte is present\n        //if( headByteArray[ index+1 ] === undefined) throw new Error(\"Invalid HB Bytes array. exponent byte was expected.\");\n        if( (headByteArray[ index+1 ] & 128) === 128){//negative\n            exponentValue = -(headByteArray[ index+1 ] ^ 128); \n        }else{//positive\n            exponentValue = headByteArray[ index+1 ]; \n        }\n\n        headByte = (headByte ^ 64 ) - 1;\n\n    }\n\n    //const coffecientsArrLength = headByte;\n    \n\n    var coffecientIndex = exponentValue !== 0 ? index + 2 : index + 1;\n\n    let decimalValue = BigNumber( headByteArray[  coffecientIndex ] );\n    for(let i=1; i< headByte; i++){\n        if( i< powerOf256.length ){ //to save runtime operations\n            decimalValue = decimalValue.plus(   powerOf256[i].multipliedBy( headByteArray[ coffecientIndex+ i] ) )\n        }else{\n            decimalValue = decimalValue.plus(   BigNumber(base).pow(i).multipliedBy( headByteArray[ coffecientIndex+ i] ) )\n        }\n    }\n\n    if( exponentValue ){\n        //decimalValue = decimalValue.multipliedBy( BigNumber(10).pow( exponentValue ) )\n        decimalValue = BigNumber(exponentPow ( decimalValue.toFixed(), exponentValue ) );\n    }\n\n    if( isNegative ){\n        decimalValue = decimalValue.multipliedBy( -1 );\n    }\n\n    return decimalValue;\n}\nByteBit.decode = function(){\n    const bigNumber = toBigNumber(...arguments);\n    return new ByteBit(bigNumber.toFixed() );\n}\n\nmodule.exports = ByteBit;","const increase = require(\"../common/CyclicCounter\");\nconst LBSequence = require(\"../LB/LBSequencePremitive\");\nconst contants = {\n    ZERO: 0,                          //0000 0000\n    //NEGATIVE_ZERO: 1,\n    NAN: 128,                        //1000 0000\n    INFINITY: 64,                    //0100 0000\n    NEGATIVE_INFINITY: 192, //0110 0000\n    OTHER1: 32,      //0010 0000\n    OTHER2: 160,    //1010 0000\n    OTHER3: 224,    //1110 0000\n    OTHER4: 48,      //0011 0000\n    OTHER5: 176,    //1011 0000\n}\nconst BigNumber = require(\"bignumber.js\");\n\nconst base = 256;\n//calculate values in advance to speed up runtime calculations\nconst powerOf256 = [ //exponentTableOf256\n    BigNumber(256).pow(0),\n    BigNumber(256).pow(1),\n    BigNumber(256).pow(2),\n    BigNumber(256).pow(3),\n    BigNumber(256).pow(4),\n    BigNumber(256).pow(5),\n    BigNumber(256).pow(6),\n    BigNumber(256).pow(7),\n    BigNumber(256).pow(8),\n    BigNumber(256).pow(9),\n    BigNumber(256).pow(10),\n    BigNumber(256).pow(11),\n    BigNumber(256).pow(12),\n    BigNumber(256).pow(13),\n    BigNumber(256).pow(14),\n    BigNumber(256).pow(15),\n    BigNumber(256).pow(16),\n    BigNumber(256).pow(17),\n    BigNumber(256).pow(18),\n    BigNumber(256).pow(19),\n    BigNumber(256).pow(20),\n]\nconst zerosRegExp = /(0+)$/;\n\nconst defaultOptions = {\n    decimalSeparator: \".\",\n    errorOnNaN: false,\n    infinityIdentifier: \"infinity\", // \"- infinity\", \"-infinity\",\n    arrOnly: true,\n    forceExponent: true, //It'll remove trailing zeros\n}\n\nfunction ByteBit( decimal , options){\n    const opts = Object.assign({}, defaultOptions, options);\n\n    //Check for special values\n    if( typeof decimal === \"string\"){\n        decimal = decimal.toLowerCase().replace(/ /g,\"\");\n        let val;\n        if( decimal === opts.infinityIdentifier ){\n            val = contants.INFINITY;\n        }else if( decimal === (\"-\"+ opts.infinityIdentifier) ){\n            val = contants.NEGATIVE_INFINITY;\n        }\n\n        if( val ){\n            if( opts.arrOnly){\n                return [ val ];\n            }else{\n                return val;\n            }\n        }\n    }else if( decimal == 0) {\n        if( opts.arrOnly){\n            return [ 0 ];\n        }else{\n            return 0;\n        }\n    }\n    \n    BigNumber.config({\n        FORMAT : {\n            decimalSeparator : opts.decimalSeparator\n        }\n    });\n\n    let min = 0;\n    this.decimalValue = BigNumber(decimal);\n\n    if(this.decimalValue.isNaN() ){\n        if(opts.errorOnNaN){\n            throw new Error(\"Invalid number:\"+ decimal);\n        }else if( opts.arrOnly){\n            return [ 128 ];\n        }else{\n            return 128;\n        }\n    }\n\n    this.headByte = 0;\n    \n    if(typeof decimal === 'number'){\n        decimal = '' + decimal;\n    }\n    \n    this.exponent = 0;\n\n    //remove decimal point\n    var decimalPointPosition = decimal.indexOf( opts.decimalSeparator );\n    if( decimalPointPosition !== -1 ){\n        \n        //there is no point of having trailing zero in decimal values\n        //so remove them\n        decimal = decimal.replace(/0+$/, \"\"); //remove trailing zeros\n        this.exponent = decimal.length - decimalPointPosition - 1 ;\n        if( this.exponent ) { // ignore the number like 123.00\n            this.exponent = -this.exponent;\n        }\n        \n        decimal = decimal.replace(opts.decimalSeparator, \"\");\n    }\n\n    //remove trailing zeros\n    //exponent value take an extra byte. So don't create it until the number is smaller than 65535\n    if( opts.forceExponent && this.decimalValue.isGreaterThan(65535) ){\n        var zeros = zerosRegExp.exec(decimal);\n        if( zeros ){\n            this.exponent += zeros[1].length;\n            decimal = decimal.replace(/0+$/, \"\"); //remove trailing zeros\n        }\n    }\n\n    this.decimalValue = BigNumber(decimal);\n\n    //update head byte as per exponent\n    this.exponentInBytes = [];\n    if( this.exponent ) {\n        this.headByte = this.headByte | 64;\n        if( this.exponent > 0) {\n            this.exponentInBytes = LBSequence.encode(this.exponent, opts);\n        }else{\n            this.headByte = this.headByte | 32;\n            this.exponentInBytes = LBSequence.encode( -this.exponent, opts);\n        }\n    }\n\n    if( this.decimalValue.isNegative() ){\n        this.headByte = this.headByte | 128;\n        this.decimalValue = this.decimalValue.abs();\n    }\n    \n    this.coffecient = [];\n\n    this._levelUpIterative = function(level, quotient, remainder){\n\n        let coffecient = [ 0 ];\n        coffecient[level] = increase(coffecient[level] | 0, base).by(remainder);\n\n        for(level=1 ; quotient.isGreaterThan(base - 1);level++ ){//still divisible\n            remainder = quotient.modulo( base ).toNumber();\n            quotient = quotient.minus(remainder).dividedBy( base );\n            \n            coffecient[level] = increase(coffecient[level] | 0, base).by(remainder);\n        }\n        \n        if(quotient.isEqualTo(0)) {\n            //don't add extra empty byte\n        }else{\n            if( !coffecient[ level ] ) coffecient.push( 0 );\n\n            coffecient[ level ] = increase(coffecient[ level ], base).by( quotient.toNumber() );\n        }\n\n        return coffecient;\n    }\n\n    this._decimalToByteSequence = function(){\n\n        let remainder = this.decimalValue.modulo( base ).toNumber();\n        let quotient = this.decimalValue.minus(remainder).dividedBy( base );\n\n        this.coffecient = this._levelUpIterative(0, quotient, remainder);\n\n        //half of the head byte contain cofficent & exponent bytes count if it is smaller than 16\n        const count = this.exponentInBytes.length + this.coffecient.length;\n\n        if(count < 16){\n            this.headByte = this.headByte | count;\n        }else{\n            this.headByte = this.headByte | 16;\n            this.totalCountBytes = LBSequence.encode( count );\n        }\n        \n    }\n    this._decimalToByteSequence();\n\n   \n    /**\n     * Returns Byte array of header byte, exponent byte, and coffecients only\n     */\n    this.toByteArray = function(){\n        let bArr = [ this.headByte ];\n        if( this.totalCountBytes ){\n            bArr.push( ...this.totalCountBytes);\n        }\n        if( this.exponentInBytes ){\n            bArr.push( ...this.exponentInBytes);\n        }\n        bArr.push( ... this.coffecient );\n        return bArr;\n    }\n\n    this.toExponentString = function(range, limit=64){\n        return toBigNumber( this.toByteArray() ,0,limit).toExponential(range);\n    }\n    \n    this.toString = function(limit=64){\n        return toBigNumber( this.toByteArray() ,0,limit).toFixed();\n    }\n\n}\n\nfunction exponentPow(numStr, pow){\n    if(pow > 0){//positive\n        return numStr + '0'.repeat(pow);\n    }else{//negative\n        const index = (numStr.length + pow);\n        return numStr.substring(0,index) + \".\" + numStr.substring(index)\n    }\n}\n\n/**\n * Convert HB bytes array to BigNumber.\n * HB bytes array can be read from buffer when buffer/bytes array and index is given\n * or when passed as method param\n * otherwise construct it with instance value\n */\nconst toBigNumber = function( byteSequence , index, limit=64 ){\n    //headByteArray || ( headByteArray = this.toByteArray() );\n    index || (index = 0);\n    let headByte = byteSequence[index];\n    //read for special values\n    if( headByte === contants.ZERO){\n        return BigNumber(0);\n    }else if( headByte === contants.NAN){\n        return NaN;\n    }else if( headByte === contants.INFINITY){\n        return opts.infinityIdentifier;\n    }else if( headByte === contants.NEGATIVE_INFINITY){\n        return \"-\"+opts.infinityIdentifier;\n    }\n\n    const code = headByte & 15; //number of bytes (remainder)\n    let count = 0;\n    if( (headByte & 16) === 16){ //count byte flag\n        count = LBSequence.decode(byteSequence, index + 1);\n        index += count.len;\n        count = count.val;\n    }else{\n        count = code;\n        //index++;\n    }\n\n    if( byteSequence[ index+ count ] === undefined ) throw new Error(\"Invalid EHB bytes sequence.\");\n\n    let isNegative = false;\n    if( (headByte & 128) === 128 ) {//negative\n        isNegative = true;\n        headByte = headByte ^ 128;\n    }\n    \n    let exponent = {};\n    if( (headByte & 64) === 64){//exponent byte is present\n        exponent = LBSequence.decode(byteSequence, index +1 );\n        count -= exponent.len;\n        if(limit < count) throw new Error(\"Maximum length exceeded\");\n        headByte = headByte ^ 64;\n        if( (headByte & 32) === 32 ){//exponent byte is negative\n            exponent.val = -exponent.val;\n            headByte = headByte ^ 32;\n        } \n    }\n\n    //const coffecientsArrLength = headByte;\n    if( byteSequence[ index + (headByte -1) ] === undefined) throw new Error(\"Invalid EHB Bytes array. All coffecient bytes are not present.\");\n\n    var coffecientIndex = (exponent.len ? index + exponent.len : index) + 1;\n\n    let decimalValue = BigNumber( byteSequence[  coffecientIndex ] );\n    for(let i=1; i< count; i++){\n        if( i< powerOf256.length ){ //to save runtime operations\n            decimalValue = decimalValue.plus(   powerOf256[i].multipliedBy( byteSequence[ coffecientIndex+ i] ) )\n        }else{\n            decimalValue = decimalValue.plus(   BigNumber(base).pow(i).multipliedBy( byteSequence[ coffecientIndex+ i] ) )\n        }\n    }\n\n    if( exponent.val ){\n        //decimalValue = decimalValue.multipliedBy( BigNumber(10).pow( exponent.val ) )\n        decimalValue = BigNumber(exponentPow ( decimalValue.toFixed(), exponent.val ) );\n    }\n\n    if( isNegative ){\n        decimalValue = decimalValue.multipliedBy( -1 );\n    }\n\n    return decimalValue;\n}\n\nByteBit.decode = function(){\n    const bigNumber = toBigNumber(...arguments);\n    return new ByteBit(bigNumber.toFixed() );\n}\n\nmodule.exports = ByteBit;","const increase = require(\"../common/CyclicCounter\");\nconst {getCodePoint} = require(\"../common/encoding\");\nconst powerOf128 = [ //exponentTableOf128\n    Math.pow(128, 0),\n    Math.pow(128, 1),\n    Math.pow(128, 2),\n    Math.pow(128, 3),\n    Math.pow(128, 4),\n    Math.pow(128, 5),\n    Math.pow(128, 6),\n    Math.pow(128, 7),\n    Math.pow(128, 8),\n    Math.pow(128, 9),\n    Math.pow(128, 10),\n    Math.pow(128, 11),\n    Math.pow(128, 12),\n    Math.pow(128, 13),\n    Math.pow(128, 14),\n    Math.pow(128, 15),\n    Math.pow(128, 16),\n    Math.pow(128, 17),\n    Math.pow(128, 18),\n    Math.pow(128, 19),\n    Math.pow(128, 20),\n]\n\nconst base = 128;\nconst defaultOptions = {\n    decimalSeparator: \".\",\n    arrOnly: true,\n}\n\nconst LBSequence = {\n    encode : function(num, options){\n        const opts = Object.assign({}, defaultOptions, options);\n\n        if(num === null || num === undefined){\n            throw new Error(\"LB format doesn't support an invalid number\");\n        }else if(num == 0){\n            if( opts.arrOnly){\n                return [ 0 ];\n            }else{\n                return 0;\n            }\n        }else if(typeof num === 'number' && num % 1 ){\n            throw new Error(\"LB format doesn't support fractional number\");\n        }\n\n        let decimalValue = num;\n        if(decimalValue < 0){\n            throw new Error(\"LB format doesn't support negative number\");\n        }\n\n        let remainder = decimalValue % base ;\n        let sequence = [ 0 ];\n        let quotient = (decimalValue - remainder) / base;\n    \n        function _buildSequence(level, quotient, remainder){\n            if( quotient> base - 1 ){//still divisible\n                sequence[level] = increase(sequence[level] | 0, base).by(remainder) | 128;\n                remainder = quotient % base;\n                \n                _buildSequence(level + 1, (quotient - remainder) / base , remainder);\n            }else if(quotient === 0) {\n\n                //don't add extra empty byte\n            }else{\n                sequence[level] = increase(sequence[level] | 0, base).by(remainder) | 128;\n                if( !sequence[ level +1 ] ) {\n                    sequence.push( 0 );\n                }\n                sequence[ level + 1 ] = increase(sequence[ level + 1 ] | 0, base).by( quotient );\n            }\n        }\n\n        if(quotient === 0) {\n            return [ remainder ];\n        }else{\n            _buildSequence(0, quotient, remainder );\n            return sequence;\n        }\n    },\n\n    decode : function( byteSequence , index ){\n        index || (index = 0);\n        \n        //read for special values\n        if( byteSequence[index] === 0){\n            return {\n                val: 0,\n                len: 1\n            } \n        }\n        let decimalValue = 0;\n        let i=0;\n        for(; byteSequence[  index + i] & 128 ; i++){\n            quotient = byteSequence[  index + i]  ^ 128;\n            if( i < powerOf128.length ){ //to save runtime operations\n                decimalValue = decimalValue +  ( powerOf128[i] * quotient ) ;\n            }else{\n                decimalValue = decimalValue +   ( Math.pow(base, i) *  quotient ) ;\n            }\n        }\n\n        if( i < powerOf128.length ){ //to save runtime operations\n            decimalValue = decimalValue +   ( powerOf128[i] *  byteSequence[ index+ i] ) ;\n        }else{\n            decimalValue = decimalValue +   (Math.pow(base, i) * byteSequence[ index+ i] ) ;\n        }\n\n        return {\n            val: decimalValue,\n            len: i + 1\n        }\n    }\n}\n\nLBSequence.strToByteArr = function(str){\n    const byteArr = [];\n    for(let i=0; i< str.length; i++){\n        var code = str.charCodeAt(i);\n\n        if (code >= 0xD800 && code <= 0xDBFF && str.length > 1) {\n            var second = str.charCodeAt(++i);\n\n            if (second >= 0xDC00 && second <= 0xDFFF) {\n                code = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n            }\n        }\n\n        byteArr.push(...LBSequence.encode(code));\n    }\n    return byteArr;\n}\n\nLBSequence.byteArrToStr = function(byteArr, start, end){\n    start || (start = 0);\n    end || (end  = byteArr.length);\n    let str = '';\n    while(start< end){\n        let code = LBSequence.decode( byteArr, start );\n        str += String.fromCodePoint( code.val );\n        start += code.len;\n    }\n    return str;\n}\n\nLBSequence.convert = function(){\n    if( typeof arguments[0] === 'string'){\n        return LBSequence.strToByteArr(arguments[0]);\n    }else{\n        return LBSequence.byteArrToStr( ...arguments);\n    }\n}\n\nmodule.exports = LBSequence;","'use restrict'\n\nconst increase = require(\"../common/CyclicCounter\");\nconst {getCodePoint} = require(\"../common/encoding\");\nconst BigNumber = require(\"bignumber.js\");\nconst powerOf128 = [ //exponentTableOf128\n    BigNumber(128).pow(0),\n    BigNumber(128).pow(1),\n    BigNumber(128).pow(2),\n    BigNumber(128).pow(3),\n    BigNumber(128).pow(4),\n    BigNumber(128).pow(5),\n    BigNumber(128).pow(6),\n    BigNumber(128).pow(7),\n    BigNumber(128).pow(8),\n    BigNumber(128).pow(9),\n    BigNumber(128).pow(10),\n    BigNumber(128).pow(11),\n    BigNumber(128).pow(12),\n    BigNumber(128).pow(13),\n    BigNumber(128).pow(14),\n    BigNumber(128).pow(15),\n    BigNumber(128).pow(16),\n    BigNumber(128).pow(17),\n    BigNumber(128).pow(18),\n    BigNumber(128).pow(19),\n    BigNumber(128).pow(20),\n]\n\nconst base = 128;\nconst defaultOptions = {\n    decimalSeparator: \".\",\n    arrOnly: true,\n}\n\nconst LBSequence = {\n    encode : function(num, options){\n        const opts = Object.assign({}, defaultOptions, options);\n\n        if(num === null || num === undefined){\n            throw new Error(\"LB format doesn't support an invalid number\");\n        }else if(num == 0){\n            if( opts.arrOnly){\n                return [ 0 ];\n            }else{\n                return 0;\n            }\n        }else if(typeof num === 'string' && num.indexOf(opts.decimalSeparator) !== -1){\n            throw new Error(\"LB format doesn't support fractional number\");\n        }else if(typeof num === 'number' && num % 1 ){\n            throw new Error(\"LB format doesn't support fractional number\");\n        }\n\n        let decimalValue = BigNumber(num);\n        if(decimalValue.isNegative()){\n            throw new Error(\"LB format doesn't support negative number\");\n        }\n\n        let sequence = [ 0 ];\n        let remainder = decimalValue.modulo( base ).toNumber();\n        let quotient = decimalValue.minus(remainder).dividedBy( base );\n    \n        function _buildSequence(level, quotient, remainder){\n            for(; quotient.isGreaterThan(base - 1); level++ ){//still divisible\n                sequence[level] = increase(sequence[level] | 0, base).by(remainder) | 128;\n                remainder = quotient.modulo( base ).toNumber();\n                quotient = quotient.minus(remainder).dividedBy( base );\n            }\n            \n            if(quotient.isEqualTo(0)) {\n                //don't add extra empty byte\n            }else{\n                sequence[level] = increase(sequence[level] | 0, base).by(remainder) | 128;\n                if( !sequence[ level +1 ] ) {\n                    sequence.push( 0 );\n                }\n                sequence[ level + 1 ] = increase(sequence[ level + 1 ] | 0, base).by( quotient.toNumber() );\n            }\n        }\n\n        if(quotient.isEqualTo(0)) {\n            return [ remainder ];\n        }else{\n            _buildSequence(0, quotient, remainder );\n            return sequence;\n        }\n    },\n\n    decode : function( byteSequence , index, limit=64 ){\n        index || (index = 0);\n        \n        //read for special values\n        if( byteSequence[index] === 0){\n            return {\n                val: BigNumber(0),\n                len: 1\n            } \n        }\n        let decimalValue = BigNumber(0);\n        let i=0;\n        for(; byteSequence[  index + i] & 128 ; i++){\n            if(limit < i) throw Error(\"Maximum length exceeded\");\n            quotient = BigNumber(byteSequence[  index + i]  ^ 128);\n            if( i < powerOf128.length ){ //to save runtime operations\n                decimalValue = decimalValue.plus(   powerOf128[i].multipliedBy( quotient ) )\n            }else{\n                decimalValue = decimalValue.plus(   BigNumber(base).pow(i).multipliedBy( quotient ) )\n            }\n        }\n\n        if( i < powerOf128.length ){ //to save runtime operations\n            decimalValue = decimalValue.plus(   powerOf128[i].multipliedBy( byteSequence[ index+ i] ) )\n        }else{\n            decimalValue = decimalValue.plus(   BigNumber(base).pow(i).multipliedBy( byteSequence[ index+ i] ) )\n        }\n\n        return {\n            val: decimalValue.toFixed(),\n            len: i + 1\n        }\n    }\n}\n\nLBSequence.strToByteArr = function(str){\n    const byteArr = [];\n    for(let i=0; i< str.length; i++){\n        var code = str.charCodeAt(i);\n\n        if (code >= 0xD800 && code <= 0xDBFF && str.length > 1) {\n            var second = str.charCodeAt(++i);\n\n            if (second >= 0xDC00 && second <= 0xDFFF) {\n                code = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n            }\n        }\n\n        /* const code = str.codePointAt(i);\n        if( code > 65535) i++; */\n\n        byteArr.push(...LBSequence.encode(code));\n    }\n    /* Short and simple solution\n    str = [...str];\n    for(let i=0; i< str.length; i++){\n        byteArr.push(...LBSequence.encode( str[i].codePointAt(0) ));\n    } */\n\n    return byteArr;\n}\n\nLBSequence.byteArrToStr = function(byteArr, start, end){\n    start || (start = 0);\n    end || (end  = byteArr.length);\n    let str = '';\n    while(start< end){\n        let code = LBSequence.decode( byteArr, start );\n        str += String.fromCodePoint( code.val );\n        start += code.len;\n    }\n    return str;\n}\n\nLBSequence.convert = function(){\n    if( typeof arguments[0] === 'string'){\n        return LBSequence.strToByteArr(arguments[0]);\n    }else{\n        return LBSequence.byteArrToStr( ...arguments);\n    }\n}\n\nmodule.exports = LBSequence;"],"sourceRoot":""}